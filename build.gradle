group("com.tabuyos.microservice")
version("0.1.0")

def projectVersion = "0.1.0"
def groupId = "com.tabuyos.microservice"
def junitJupiterVersion = "5.7.0"
def hutoolVersion = "5.5.1"
def mariadbVersion = "2.6.0"
def mybatisSpringVersion = "2.1.4"
def mybatisPlusVersion = "3.4.1"
def springCloudVersion = "2020.0.0"
def springBootVersion = "2.4.1"
def dependencyManagementVersion = "1.0.10.RELEASE"


allprojects {
  group(groupId)
  version(projectVersion)

  repositories {
    mavenLocal()
    maven {
      url "https://maven.aliyun.com/repository/public"
      name "AliyunPublic"
    }
    mavenCentral()
  }
}

subprojects {
  apply plugin: "java"

  repositories {
    mavenCentral()
  }

  configurations {
    developmentOnly
    runtimeClasspath {
      extendsFrom developmentOnly
    }
    compileOnly {
      extendsFrom annotationProcessor
    }
  }

  dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("cn.hutool:hutool-all:${hutoolVersion}")
    implementation("org.mariadb.jdbc:mariadb-java-client:${mariadbVersion}")
//    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringVersion}")
//    implementation("com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
      exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    developmentOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
  }

  configurations {
    all {
      implementation.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
  }

  compileJava.inputs.files(processResources)

  test {
    useJUnitPlatform()
    jvmArgs("--illegal-access=deny")
    jvmArgs("--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED")
  }

  java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  task createSrcDirs {
    sourceSets*.java.srcDirs*.each {
      it.mkdirs()
    }
    sourceSets*.resources.srcDirs*.each {
      it.mkdirs()
    }
  }
}
